apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: build-java
spec:
  stepTemplate:
    volumeMounts:
    - name: varlibc
      mountPath: /var/lib/containers
    - name: maven-settings
      mountPath: /tmp/maven-settings
    - name: trusted-ca
      mountPath: /etc/pki/ca-trust/extracted/pem
      readOnly: true
  params:
  - name: app-name
    type: string
    description: The application name
  - name: build-type
    type: string
    description: "Selected build type: quarkus-jvm, quarkus-fast-jar, quarkus-native, spring-boot"
  - name: git-repo-url
    type: string
    description: "Git Repository URL"
  - name: git-checkout
    type: string
    description: "Git code to checkout, either a branch name or a commit sha.  Determined by the value of clone-type"
  - name: clone-type
    type: string
    description: "The type of git clone: sha, branch"
    default: "branch"
  volumes:
  - name: varlibc
    emptyDir: {}
  - name: maven-settings
    configMap:
      name: maven-settings-xml
  - name: trusted-ca
    configMap:
      name: trusted-ca
      items:
        - key: ca-bundle.crt 
          path: tls-ca-bundle.pem
  steps:
  - name: prep-build
    image: image-registry.openshift-image-registry.svc:5000/openshift/java-11-builder:latest
    imagePullPolicy: IfNotPresent
    script: |
      #!/bin/bash
      mkdir -p /workspace/source
      chmod 777 /workspace/source
      case $(params.clone-type) in
        sha)
          cd /workspace/source
          git init
          git remote add origin $(params.git-repo-url)
          git pull origin $(params.git-checkout)
          echo "$(params.git-checkout)" > /workspace/git-sha.out
        ;;
        branch)
          git clone -b $(params.git-checkout) --single-branch $(params.git-repo-url) /workspace/source
          cd /workspace/source
          echo "$(git rev-parse HEAD)" > /workspace/git-sha.out
        ;;
      esac
      cp /tmp/maven-settings/settings.xml /workspace/source
    env:
    - name: user.home
      value: /tekton/home
    workingDir: "/"
  - name: build-sources
    image: image-registry.openshift-image-registry.svc:5000/openshift/java-11-builder:latest
    imagePullPolicy: IfNotPresent
    script: |
      #!/bin/bash
      MVN_ARGS="-DskipTests -Dmaven.wagon.http.ssl.insecure=true -s./settings.xml -DappName=app"
      case $(params.build-type) in
        spring-boot)
        ;;
        quarkus-jvm)
        ;;
        quarkus-fast-jar)
        MVN_ARGS="${MVN_ARGS} -Dquarkus.package.type=fast-jar"
        ;;
        quarkus-native)
        MVN_ARGS="${MVN_ARGS} -Pnative"
        ;;
      esac
      mvn ${MVN_ARGS} clean package
    env:
    - name: user.home
      value: /tekton/home
    workingDir: "/workspace/source"
  - name: prep-workingdir-for-buildah
    image: image-registry.openshift-image-registry.svc:5000/openshift/buildah:latest
    imagePullPolicy: IfNotPresent
    script: |
      chmod 777 /workspace/source
      chown -R 1000 /tekton/home
    env:
    - name: user.home
      value: /tekton/home
    workingDir: "/workspace/source"
  - name: build-image
    image: image-registry.openshift-image-registry.svc:5000/openshift/buildah:latest
    securityContext:
      runAsUser: 1000
    imagePullPolicy: IfNotPresent
    script: |
      #!/bin/bash
      SHA=$(cat /workspace/git-sha.out)
      BUILDAH_ARGS="--storage-driver vfs"
      export BUILDAH_ISOLATION=chroot
      DESTINATION_IMAGE="image-registry.openshift-image-registry.svc:5000/$(context.taskRun.namespace)/$(params.app-name)"
      if [[ $(params.build-type) == "quarkus-native" ]]
      then
        CONTAINER=$(buildah ${BUILDAH_ARGS} from image-registry.openshift-image-registry.svc:5000/openshift/ubi-minimal:latest)
      else
        CONTAINER=$(buildah ${BUILDAH_ARGS} from image-registry.openshift-image-registry.svc:5000/openshift/java-11-app-runner:latest )
      fi
      case $(params.build-type) in
        spring-boot)
        buildah ${BUILDAH_ARGS} copy ${CONTAINER} ./target/app.jar /deployments/app.jar
        ;;
        quarkus-jvm)
        buildah ${BUILDAH_ARGS} copy ${CONTAINER} ./target/lib/* /deployments/lib/
        buildah ${BUILDAH_ARGS} copy ${CONTAINER} ./target/app-runner.jar /deployments/app.jar
        ;;
        quarkus-fast-jar)
        buildah ${BUILDAH_ARGS} copy ${CONTAINER} ./target/quarkus-app/lib/ /deployments/lib/
        buildah ${BUILDAH_ARGS} copy ${CONTAINER} ./target/quarkus-app/quarkus-run.jar /deployments/app.jar
        buildah ${BUILDAH_ARGS} copy ${CONTAINER} ./target/quarkus-app/app/ /deployments/app/
        buildah ${BUILDAH_ARGS} copy ${CONTAINER} ./target/quarkus-app/quarkus/ /deployments/quarkus/
        ;;
        quarkus-native)
        buildah ${BUILDAH_ARGS} copy ${CONTAINER} ./target/app-runner /application
        buildah ${BUILDAH_ARGS} config --entrypoint '["/application", "-Dquarkus.http.host=0.0.0.0", "${JAVA_OPTIONS}"]' --port 8080 ${CONTAINER}
      esac
      buildah ${BUILDAH_ARGS} config --label GIT_COMMIT=${SHA} --author="Tekton" ${CONTAINER}
      buildah ${BUILDAH_ARGS} config --label GIT_URL=$(params.git-repo-url) ${CONTAINER}
      buildah ${BUILDAH_ARGS} commit ${CONTAINER} ${DESTINATION_IMAGE}:${SHA:0:7}
      buildah ${BUILDAH_ARGS} unmount ${CONTAINER}
      buildah ${BUILDAH_ARGS} push ${DESTINATION_IMAGE}:${SHA:0:7} docker://${DESTINATION_IMAGE}:${SHA:0:7}
      buildah ${BUILDAH_ARGS} push ${DESTINATION_IMAGE}:${SHA:0:7} docker://${DESTINATION_IMAGE}:latest
    env:
    - name: user.home
      value: /tekton/home
    workingDir: "/workspace/source"
